#!/usr/bin/env nickle
/*
 * Copyright Â© 2023 Keith Packard <keithp@keithp.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

const int UCS_PAGE_SHIFT = 7;
const int UCS_PER_PAGE =   (1 << UCS_PAGE_SHIFT);

typedef struct {
	int			page;
	int[UCS_PER_PAGE]	offsets;
} charmap_t;

typedef struct {
	string		name;
	string		style;
	charmap_t[] 	charmap;
	int[]		outlines;
	int		ascender;
	int		descender;
	int		height;

	int		cur_page;
} font_t;

const int[] outlines = {
/* 0x0 '\0'  offset 0 */
    0, 24, 42, 0, 2, 4,
    0, 24, /* snap_x */
    -42, -21, -15, 0, /* snap_y */
    'm', 0, 0,
    'l', 0, -42,
    'l', 24, -42,
    'l', 24, 0,
    'l', 0, 0,
    'e',
/* 0x20 ' '  offset 28 */
    0, 4, 0, 0, 2, 3,
    -128, 0, /* snap_x */
    -21, -15, 0, /* snap_y */
    'e',
/* 0x21 '!'  offset 40 */
    0, 4, 42, 0, 3, 3,
    0, 2, 4, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 2, -42,
    'l', 2, -14,
    'm', 2, -4,
    'c', 1, -4, 0, -3, 0, -2,
    'c', 0, -1, 1, 0, 2, 0,
    'c', 3, 0, 4, -1, 4, -2,
    'c', 4, -3, 3, -4, 2, -4,
    'e',
/* 0x22 '"'  offset 90 */
    0, 16, 42, -28, 2, 3,
    0, 16, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, -28,
    'm', 16, -42,
    'l', 16, -28,
    'e',
/* 0x23 '#'  offset 114 */
    0, 30, 50, 14, 2, 5,
    0, 30, /* snap_x */
    -24, -21, -15, -12, 0, /* snap_y */
    'm', 16, -50,
    'l', 2, 14,
    'm', 28, -50,
    'l', 14, 14,
    'm', 2, -24,
    'l', 30, -24,
    'm', 0, -12,
    'l', 28, -12,
    'e',
/* 0x24 '$'  offset 152 */
    0, 28, 50, 8, 4, 4,
    0, 10, 18, 28, /* snap_x */
    -42, -21, -15, 0, /* snap_y */
    'm', 10, -50,
    'l', 10, 8,
    'm', 18, -50,
    'l', 18, 8,
    'm', 28, -36,
    'c', 24, -42, 18, -42, 14, -42,
    'c', 10, -42, 0, -42, 0, -34,
    'c', 0, -25, 8, -24, 14, -22,
    'c', 20, -20, 28, -19, 28, -9,
    'c', 28, 0, 18, 0, 14, 0,
    'c', 10, 0, 4, 0, 0, -6,
    'e',
/* 0x25 '%'  offset 224 */
    0, 36, 42, 0, 4, 7,
    0, 14, 22, 36, /* snap_x */
    -42, -38, -28, -21, -15, -14, 0, /* snap_y */
    'm', 36, -42,
    'l', 0, 0,
    'm', 10, -42,
    'c', 12, -41, 14, -40, 14, -36,
    'c', 14, -30, 11, -28, 6, -28,
    'c', 2, -28, 0, -30, 0, -34,
    'c', 0, -39, 3, -42, 8, -42,
    'l', 10, -42,
    'c', 18, -37, 28, -37, 36, -42,
    'm', 28, -14,
    'c', 24, -14, 22, -11, 22, -6,
    'c', 22, -2, 24, 0, 28, 0,
    'c', 33, 0, 36, -2, 36, -8,
    'c', 36, -12, 34, -14, 30, -14,
    'l', 28, -14,
    'e',
/* 0x26 '&'  offset 323 */
    0, 40, 42, 0, 4, 4,
    0, 10, 22, 40, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 40, -24,
    'c', 40, -27, 39, -28, 37, -28,
    'c', 29, -28, 32, 0, 12, 0,
    'c', 0, 0, 0, -8, 0, -10,
    'c', 0, -24, 22, -20, 22, -34,
    'c', 22, -45, 10, -45, 10, -34,
    'c', 10, -27, 25, 0, 36, 0,
    'c', 39, 0, 40, -1, 40, -4,
    'e',
/* 0x27 '''  offset 390 */
    0, 4, 42, -30, 2, 3,
    0, 4, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 2, -38,
    'c', -1, -38, -1, -42, 2, -42,
    'c', 6, -42, 5, -33, 0, -30,
    'e',
/* 0x28 '('  offset 419 */
    0, 14, 50, 14, 2, 3,
    0, 14, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 14, -50,
    'c', -5, -32, -5, -5, 14, 14,
    'e',
/* 0x29 ')'  offset 441 */
    0, 14, 50, 14, 2, 3,
    0, 14, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -50,
    'c', 19, -34, 19, -2, 0, 14,
    'e',
/* 0x2a '*'  offset 463 */
    0, 20, 30, -6, 3, 3,
    0, 10, 20, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 10, -30,
    'l', 10, -6,
    'm', 0, -24,
    'l', 20, -12,
    'm', 20, -24,
    'l', 0, -12,
    'e',
/* 0x2b '+'  offset 494 */
    0, 36, 36, 0, 3, 4,
    0, 18, 36, /* snap_x */
    -21, -18, -15, 0, /* snap_y */
    'm', 18, -36,
    'l', 18, 0,
    'm', 0, -18,
    'l', 36, -18,
    'e',
/* 0x2c ','  offset 520 */
    0, 4, 4, 8, 2, 3,
    0, 4, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 4, -2,
    'c', 4, 1, 0, 1, 0, -2,
    'c', 0, -5, 4, -5, 4, -2,
    'c', 4, 4, 2, 6, 0, 8,
    'e',
/* 0x2d '-'  offset 556 */
    0, 36, 18, -18, 2, 4,
    0, 36, /* snap_x */
    -21, -18, -15, 0, /* snap_y */
    'm', 0, -18,
    'l', 36, -18,
    'e',
/* 0x2e '.'  offset 575 */
    0, 4, 4, 0, 2, 3,
    0, 4, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 2, -4,
    'c', -1, -4, -1, 0, 2, 0,
    'c', 5, 0, 5, -4, 2, -4,
    'e',
/* 0x2f '/'  offset 604 */
    0, 36, 50, 14, 2, 3,
    0, 36, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 36, -50,
    'l', 0, 14,
    'e',
/* 0x30 '0'  offset 622 */
    0, 28, 42, 0, 2, 4,
    0, 28, /* snap_x */
    -42, -21, -15, 0, /* snap_y */
    'm', 14, -42,
    'c', 9, -42, 0, -42, 0, -21,
    'c', 0, 0, 9, 0, 14, 0,
    'c', 19, 0, 28, 0, 28, -21,
    'c', 28, -42, 19, -42, 14, -42,
    'e',
/* 0x31 '1'  offset 666 */
    0, 28, 42, 0, 2, 3,
    0, 17, 28 /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 7, -34,
    'c', 11, -35, 15, -38, 17, -42,
    'l', 17, 0,
    'e',
/* 0x32 '2'  offset 691 */
    0, 28, 42, 0, 4, 4,
    0, 2, 26, 28, /* snap_x */
    -42, -21, -15, 0, /* snap_y */
    'm', 2, -32,
    'c', 2, -34, 2, -42, 14, -42,
    'c', 26, -42, 26, -34, 26, -32,
    'c', 26, -30, 25, -25, 10, -10,
    'l', 0, 0,
    'l', 28, 0,
    'e',
/* 0x33 '3'  offset 736 */
    0, 28, 42, 0, 2, 5,
    0, 28, /* snap_x */
    -42, -26, -21, -15, 0, /* snap_y */
    'm', 4, -42,
    'l', 26, -42,
    'l', 14, -26,
    'c', 21, -26, 28, -26, 28, -14,
    'c', 28, 0, 17, 0, 13, 0,
    'c', 8, 0, 3, -1, 0, -8,
    'e',
/* 0x34 '4'  offset 780 */
    0, 28, 42, 0, 3, 4,
    0, 20, 30, /* snap_x */
    -21, -15, -14, 0, /* snap_y */
    'm', 20, -42,
    'l', 0, -14,
    'l', 30, -14,
    'm', 20, -42,
    'l', 20, 0,
    'e',
/* 0x35 '5'  offset 809 */
    0, 28, 42, 0, 2, 5,
    0, 28, /* snap_x */
    -42, -28, -21, -15, 0, /* snap_y */
    'm', 24, -42,
    'l', 4, -42,
    'l', 2, -24,
    'c', 5, -27, 10, -28, 13, -28,
    'c', 16, -28, 28, -28, 28, -14,
    'c', 28, 0, 16, 0, 13, 0,
    'c', 10, 0, 3, 0, 0, -8,
    'e',
/* 0x36 '6'  offset 860 */
    0, 28, 42, 0, 2, 5,
    0, 26, /* snap_x */
    -42, -26, -21, -15, 0, /* snap_y */
    'm', 24, -36,
    'c', 22, -41, 19, -42, 14, -42,
    'c', 9, -42, 0, -41, 0, -19,
    'c', 0, -1, 9, 0, 13, 0,
    'c', 18, 0, 26, -3, 26, -13,
    'c', 26, -18, 23, -26, 13, -26,
    'c', 10, -26, 1, -24, 0, -14,
    'e',
/* 0x37 '7'  offset 919 */
    0, 28, 42, 0, 2, 4,
    0, 28, /* snap_x */
    -42, -21, -15, 0, /* snap_y */
    'm', 28, -42,
    'l', 8, 0,
    'm', 0, -42,
    'l', 28, -42,
    'e',
/* 0x38 '8'  offset 944 */
    0, 28, 42, 0, 4, 4,
    0, 2, 26, 28, /* snap_x */
    -42, -21, -15, 0, /* snap_y */
    'm', 14, -42,
    'c', 5, -42, 2, -40, 2, -34,
    'c', 2, -18, 28, -32, 28, -11,
    'c', 28, 0, 18, 0, 14, 0,
    'c', 10, 0, 0, 0, 0, -11,
    'c', 0, -32, 26, -18, 26, -34,
    'c', 26, -40, 23, -42, 14, -42,
    'e',
/* 0x39 '9'  offset 1004 */
    0, 28, 42, 0, 2, 5,
    0, 26, /* snap_x */
    -42, -21, -16, -15, 0, /* snap_y */
    'm', 26, -28,
    'c', 25, -16, 13, -16, 13, -16,
    'c', 8, -16, 0, -19, 0, -29,
    'c', 0, -34, 3, -42, 13, -42,
    'c', 24, -42, 26, -32, 26, -23,
    'c', 26, -14, 24, 0, 12, 0,
    'c', 7, 0, 4, -2, 2, -6,
    'e',
/* 0x3a ':'  offset 1063 */
    0, 4, 28, 0, 2, 3,
    0, 4, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 2, -28,
    'c', -1, -28, -1, -24, 2, -24,
    'c', 5, -24, 5, -28, 2, -28,
    'm', 2, -4,
    'c', -1, -4, -1, 0, 2, 0,
    'c', 5, 0, 5, -4, 2, -4,
    'e',
/* 0x3b ';'  offset 1109 */
    0, 4, 28, 8, 2, 3,
    0, 4, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 2, -28,
    'c', -1, -28, -1, -24, 2, -24,
    'c', 5, -24, 5, -28, 2, -28,
    'm', 4, -2,
    'c', 4, 1, 0, 1, 0, -2,
    'c', 0, -5, 4, -5, 4, -2,
    'c', 4, 3, 2, 6, 0, 8,
    'e',
/* 0x3c '<'  offset 1162 */
    0, 32, 36, 0, 2, 3,
    0, 32, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 32, -36,
    'l', 0, -18,
    'l', 32, 0,
    'e',
/* 0x3d '='  offset 1183 */
    0, 36, 24, -12, 2, 5,
    0, 36, /* snap_x */
    -24, -21, -15, -12, 0, /* snap_y */
    'm', 0, -24,
    'l', 36, -24,
    'm', 0, -12,
    'l', 36, -12,
    'e',
/* 0x3e '>'  offset 1209 */
    0, 32, 36, 0, 2, 3,
    0, 32, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -36,
    'l', 32, -18,
    'l', 0, 0,
    'e',
/* 0x3f '?'  offset 1230 */
    0, 24, 42, 0, 3, 4,
    0, 12, 24, /* snap_x */
    -42, -21, -15, 0, /* snap_y */
    'm', 0, -32,
    'c', 0, -34, 0, -42, 12, -42,
    'c', 24, -42, 24, -34, 24, -32,
    'c', 24, -29, 24, -24, 12, -20,
    'l', 12, -14,
    'm', 12, -4,
    'c', 9, -4, 9, 0, 12, 0,
    'c', 15, 0, 15, -4, 12, -4,
    'e',
/* 0x40 '@'  offset 1288 */
    0, 42, 42, 0, 1, 6,
    30, /* snap_x */
    -42, -32, -21, -15, -10, 0, /* snap_y */
    'm', 30, -26,
    'c', 28, -31, 24, -32, 21, -32,
    'c', 10, -32, 10, -23, 10, -19,
    'c', 10, -13, 11, -10, 19, -10,
    'c', 30, -10, 28, -21, 30, -32,
    'c', 27, -10, 30, -10, 34, -10,
    'c', 41, -10, 42, -19, 42, -22,
    'c', 42, -34, 34, -42, 21, -42,
    'c', 9, -42, 0, -34, 0, -21,
    'c', 0, -9, 8, 0, 21, 0,
    'c', 30, 0, 34, -3, 36, -6,
    'e',
/* 0x41 'A'  offset 1375 */
    0, 32, 42, 0, 2, 4,
    0, 32, /* snap_x */
    -21, -15, -14, 0, /* snap_y */
    'm', 16, -42,
    'l', 0, 0,
    'm', 16, -42,
    'l', 32, 0,
    'm', 6, -14,
    'l', 26, -14,
    'e',
/* 0x42 'B'  offset 1406 */
    0, 28, 42, 0, 2, 5,
    0, 28, /* snap_x */
    -42, -22, -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'm', 0, -42,
    'l', 18, -42,
    'c', 32, -42, 32, -22, 18, -22,
    'm', 0, -22,
    'l', 18, -22,
    'c', 32, -22, 32, 0, 18, 0,
    'l', 0, 0,
    'e',
/* 0x43 'C'  offset 1455 */
    0, 30, 42, 0, 2, 4,
    0, 30, /* snap_x */
    -42, -21, -15, 0, /* snap_y */
    'm', 30, -32,
    'c', 26, -42, 21, -42, 16, -42,
    'c', 2, -42, 0, -29, 0, -21,
    'c', 0, -13, 2, 0, 16, 0,
    'c', 21, 0, 26, 0, 30, -10,
    'e',
/* 0x44 'D'  offset 1499 */
    0, 28, 42, 0, 2, 4,
    0, 28, /* snap_x */
    -42, -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'm', 0, -42,
    'l', 14, -42,
    'c', 33, -42, 33, 0, 14, 0,
    'l', 0, 0,
    'e',
/* 0x45 'E'  offset 1534 */
    0, 26, 42, 0, 2, 5,
    0, 26, /* snap_x */
    -42, -22, -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'm', 0, -42,
    'l', 26, -42,
    'm', 0, -22,
    'l', 16, -22,
    'm', 0, 0,
    'l', 26, 0,
    'e',
/* 0x46 'F'  offset 1572 */
    0, 26, 42, 0, 2, 5,
    0, 26, /* snap_x */
    -42, -22, -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'm', 0, -42,
    'l', 26, -42,
    'm', 0, -22,
    'l', 16, -22,
    'e',
/* 0x47 'G'  offset 1604 */
    0, 30, 42, 0, 2, 5,
    0, 30, /* snap_x */
    -42, -21, -16, -15, 0, /* snap_y */
    'm', 30, -32,
    'c', 26, -42, 21, -42, 16, -42,
    'c', 2, -42, 0, -29, 0, -21,
    'c', 0, -13, 2, 0, 16, 0,
    'c', 28, 0, 30, -7, 30, -16,
    'm', 20, -16,
    'l', 30, -16,
    'e',
/* 0x48 'H'  offset 1655 */
    0, 28, 42, 0, 2, 4,
    0, 28, /* snap_x */
    -22, -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'm', 28, -42,
    'l', 28, 0,
    'm', 0, -22,
    'l', 28, -22,
    'e',
/* 0x49 'I'  offset 1686 */
    0, 0, 42, 0, 1, 3,
    0, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'e',
/* 0x4a 'J'  offset 1703 */
    0, 20, 42, 0, 2, 3,
    0, 20, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 20, -42,
    'l', 20, -10,
    'c', 20, 3, 0, 3, 0, -10,
    'l', 0, -14,
    'e',
/* 0x4b 'K'  offset 1731 */
    0, 28, 42, 0, 2, 3,
    0, 28, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'm', 28, -42,
    'l', 0, -14,
    'm', 10, -24,
    'l', 28, 0,
    'e',
/* 0x4c 'L'  offset 1761 */
    0, 24, 42, 0, 2, 3,
    0, 24, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'm', 0, 0,
    'l', 24, 0,
    'e',
/* 0x4d 'M'  offset 1785 */
    0, 32, 42, 0, 2, 3,
    0, 32, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'm', 0, -42,
    'l', 16, 0,
    'm', 32, -42,
    'l', 16, 0,
    'm', 32, -42,
    'l', 32, 0,
    'e',
/* 0x4e 'N'  offset 1821 */
    0, 28, 42, 0, 2, 3,
    0, 28, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'm', 0, -42,
    'l', 28, 0,
    'm', 28, -42,
    'l', 28, 0,
    'e',
/* 0x4f 'O'  offset 1851 */
    0, 32, 42, 0, 2, 4,
    0, 32, /* snap_x */
    -42, -21, -15, 0, /* snap_y */
    'm', 16, -42,
    'c', 2, -42, 0, -29, 0, -21,
    'c', 0, -13, 2, 0, 16, 0,
    'c', 30, 0, 32, -13, 32, -21,
    'c', 32, -29, 30, -42, 16, -42,
    'e',
/* 0x50 'P'  offset 1895 */
    0, 28, 42, 0, 2, 5,
    0, 28, /* snap_x */
    -42, -21, -20, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'm', 0, -42,
    'l', 18, -42,
    'c', 32, -42, 32, -20, 18, -20,
    'l', 0, -20,
    'e',
/* 0x51 'Q'  offset 1931 */
    0, 32, 42, 4, 2, 4,
    0, 32, /* snap_x */
    -42, -21, -15, 0, /* snap_y */
    'm', 16, -42,
    'c', 2, -42, 0, -29, 0, -21,
    'c', 0, -13, 2, 0, 16, 0,
    'c', 30, 0, 32, -13, 32, -21,
    'c', 32, -29, 30, -42, 16, -42,
    'm', 18, -8,
    'l', 30, 4,
    'e',
/* 0x52 'R'  offset 1981 */
    0, 28, 42, 0, 2, 5,
    0, 28, /* snap_x */
    -42, -22, -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'm', 0, -42,
    'l', 18, -42,
    'c', 32, -42, 31, -22, 18, -22,
    'l', 0, -22,
    'm', 14, -22,
    'l', 28, 0,
    'e',
/* 0x53 'S'  offset 2023 */
    0, 28, 42, 0, 2, 4,
    0, 28, /* snap_x */
    -42, -21, -15, 0, /* snap_y */
    'm', 28, -36,
    'c', 25, -41, 21, -42, 14, -42,
    'c', 10, -42, 0, -42, 0, -34,
    'c', 0, -17, 28, -28, 28, -9,
    'c', 28, 0, 19, 0, 14, 0,
    'c', 7, 0, 3, -1, 0, -6,
    'e',
/* 0x54 'T'  offset 2074 */
    0, 28, 42, 0, 3, 4,
    0, 14, 28, /* snap_x */
    -42, -21, -15, 0, /* snap_y */
    'm', 14, -42,
    'l', 14, 0,
    'm', 0, -42,
    'l', 28, -42,
    'e',
/* 0x55 'U'  offset 2100 */
    0, 28, 42, 0, 2, 3,
    0, 28, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, -12,
    'c', 0, 4, 28, 4, 28, -12,
    'l', 28, -42,
    'e',
/* 0x56 'V'  offset 2128 */
    0, 32, 42, 0, 2, 3,
    0, 32, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 16, 0,
    'm', 32, -42,
    'l', 16, 0,
    'e',
/* 0x57 'W'  offset 2152 */
    0, 40, 42, 0, 2, 3,
    0, 40, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 10, 0,
    'm', 20, -42,
    'l', 10, 0,
    'm', 20, -42,
    'l', 30, 0,
    'm', 40, -42,
    'l', 30, 0,
    'e',
/* 0x58 'X'  offset 2188 */
    0, 28, 42, 0, 2, 3,
    0, 28, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 28, 0,
    'm', 28, -42,
    'l', 0, 0,
    'e',
/* 0x59 'Y'  offset 2212 */
    0, 32, 42, 0, 3, 3,
    0, 16, 32, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 16, -22,
    'l', 16, 0,
    'm', 32, -42,
    'l', 16, -22,
    'e',
/* 0x5a 'Z'  offset 2240 */
    0, 28, 42, 0, 2, 4,
    0, 28, /* snap_x */
    -42, -21, -15, 0, /* snap_y */
    'm', 28, -42,
    'l', 0, 0,
    'm', 0, -42,
    'l', 28, -42,
    'm', 0, 0,
    'l', 28, 0,
    'e',
/* 0x5b '['  offset 2271 */
    0, 14, 44, 0, 2, 4,
    0, 14, /* snap_x */
    -44, -21, -15, 0, /* snap_y */
    'm', 14, -44,
    'l', 0, -44,
    'l', 0, 0,
    'l', 14, 0,
    'e',
/* 0x5c '\'  offset 2296 */
    0, 36, 50, 14, 2, 3,
    0, 36, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -50,
    'l', 36, 14,
    'e',
/* 0x5d ']'  offset 2314 */
    0, 14, 44, 0, 2, 4,
    0, 14, /* snap_x */
    -44, -21, -15, 0, /* snap_y */
    'm', 0, -44,
    'l', 14, -44,
    'l', 14, 0,
    'l', 0, 0,
    'e',
/* 0x5e '^'  offset 2339 */
    0, 32, 46, -18, 2, 3,
    0, 32, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 16, -46,
    'l', 0, -18,
    'm', 16, -46,
    'l', 32, -18,
    'e',
/* 0x5f '_'  offset 2363 */
    0, 36, 0, 0, 2, 3,
    0, 36, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, 0,
    'l', 36, 0,
    'e',
/* 0x60 '`'  offset 2381 */
    0, 4, 42, -30, 2, 3,
    0, 4, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 4, -42,
    'c', 2, -40, 0, -39, 0, -32,
    'c', 0, -31, 1, -30, 2, -30,
    'c', 5, -30, 5, -34, 2, -34,
    'e',
/* 0x61 'a'  offset 2417 */
    0, 24, 28, 0, 2, 4,
    0, 24, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 24, -28,
    'l', 24, 0,
    'm', 24, -22,
    'c', 21, -27, 18, -28, 13, -28,
    'c', 2, -28, 0, -19, 0, -14,
    'c', 0, -9, 2, 0, 13, 0,
    'c', 18, 0, 21, -1, 24, -6,
    'e',
/* 0x62 'b'  offset 2467 */
    0, 24, 42, 0, 2, 4,
    0, 24, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'm', 0, -22,
    'c', 3, -26, 6, -28, 11, -28,
    'c', 22, -28, 24, -19, 24, -14,
    'c', 24, -9, 22, 0, 11, 0,
    'c', 6, 0, 3, -2, 0, -6,
    'e',
/* 0x63 'c'  offset 2517 */
    0, 24, 28, 0, 2, 4,
    0, 24, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 24, -22,
    'c', 21, -26, 18, -28, 13, -28,
    'c', 2, -28, 0, -19, 0, -14,
    'c', 0, -9, 2, 0, 13, 0,
    'c', 18, 0, 21, -2, 24, -6,
    'e',
/* 0x64 'd'  offset 2561 */
    0, 24, 42, 0, 2, 4,
    0, 24, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 24, -42,
    'l', 24, 0,
    'm', 24, -22,
    'c', 21, -26, 18, -28, 13, -28,
    'c', 2, -28, 0, -19, 0, -14,
    'c', 0, -9, 2, 0, 13, 0,
    'c', 18, 0, 21, -2, 24, -6,
    'e',
/* 0x65 'e'  offset 2611 */
    0, 24, 28, 0, 2, 5,
    0, 24, /* snap_x */
    -28, -21, -16, -15, 0, /* snap_y */
    'm', 0, -16,
    'l', 24, -16,
    'c', 24, -20, 24, -28, 13, -28,
    'c', 2, -28, 0, -19, 0, -14,
    'c', 0, -9, 2, 0, 13, 0,
    'c', 18, 0, 21, -2, 24, -6,
    'e',
/* 0x66 'f'  offset 2659 */
    0, 16, 42, 0, 3, 5,
    0, 6, 16, /* snap_x */
    -42, -28, -21, -15, 0, /* snap_y */
    'm', 16, -42,
    'c', 8, -42, 6, -40, 6, -34,
    'l', 6, 0,
    'm', 0, -28,
    'l', 14, -28,
    'e',
/* 0x67 'g'  offset 2693 */
    0, 24, 28, 14, 2, 5,
    0, 24, /* snap_x */
    -28, -21, -15, 0, 14, /* snap_y */
    'm', 24, -28,
    'l', 24, 4,
    'c', 23, 14, 16, 14, 13, 14,
    'c', 10, 14, 8, 14, 6, 12,
    'm', 24, -22,
    'c', 21, -26, 18, -28, 13, -28,
    'c', 2, -28, 0, -19, 0, -14,
    'c', 0, -9, 2, 0, 13, 0,
    'c', 18, 0, 21, -2, 24, -6,
    'e',
/* 0x68 'h'  offset 2758 */
    0, 22, 42, 0, 2, 4,
    0, 22, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'm', 0, -20,
    'c', 8, -32, 22, -31, 22, -20,
    'l', 22, 0,
    'e',
/* 0x69 'i'  offset 2790 */
    0, 4, 44, 0, 3, 3,
    0, 2, 4, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'c', 0, -39, 4, -39, 4, -42,
    'c', 4, -45, 0, -45, 0, -42,
    'm', 2, -28,
    'l', 2, 0,
    'e',
/* 0x6a 'j'  offset 2826 */
    -8, 4, 44, 14, 3, 4,
    0, 2, 4, /* snap_x */
    -21, -15, 0, 14, /* snap_y */
    'm', 0, -42,
    'c', 0, -39, 4, -39, 4, -42,
    'c', 4, -45, 0, -45, 0, -42,
    'm', 2, -28,
    'l', 2, 6,
    'c', 2, 13, -1, 14, -8, 14,
    'e',
/* 0x6b 'k'  offset 2870 */
    0, 22, 42, 0, 2, 3,
    0, 22, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'm', 20, -28,
    'l', 0, -8,
    'm', 8, -16,
    'l', 22, 0,
    'e',
/* 0x6c 'l'  offset 2900 */
    0, 0, 42, 0, 1, 3,
    0, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -42,
    'l', 0, 0,
    'e',
/* 0x6d 'm'  offset 2917 */
    0, 44, 28, 0, 3, 4,
    0, 22, 44, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 0, -28,
    'l', 0, 0,
    'm', 0, -20,
    'c', 5, -29, 22, -33, 22, -20,
    'l', 22, 0,
    'm', 22, -20,
    'c', 27, -29, 44, -33, 44, -20,
    'l', 44, 0,
    'e',
/* 0x6e 'n'  offset 2963 */
    0, 22, 28, 0, 2, 4,
    0, 22, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 0, -28,
    'l', 0, 0,
    'm', 0, -20,
    'c', 4, -28, 22, -34, 22, -20,
    'l', 22, 0,
    'e',
/* 0x6f 'o'  offset 2995 */
    0, 26, 28, 0, 2, 4,
    0, 26, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 13, -28,
    'c', 2, -28, 0, -19, 0, -14,
    'c', 0, -9, 2, 0, 13, 0,
    'c', 24, 0, 26, -9, 26, -14,
    'c', 26, -19, 24, -28, 13, -28,
    'e',
/* 0x70 'p'  offset 3039 */
    0, 24, 28, 14, 2, 4,
    0, 24, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 0, -28,
    'l', 0, 14,
    'm', 0, -22,
    'c', 3, -26, 6, -28, 11, -28,
    'c', 22, -28, 24, -19, 24, -14,
    'c', 24, -9, 22, 0, 11, 0,
    'c', 6, 0, 3, -2, 0, -6,
    'e',
/* 0x71 'q'  offset 3089 */
    0, 24, 28, 14, 2, 4,
    0, 24, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 24, -28,
    'l', 24, 14,
    'm', 24, -22,
    'c', 21, -26, 18, -28, 13, -28,
    'c', 2, -28, 0, -19, 0, -14,
    'c', 0, -9, 2, 0, 13, 0,
    'c', 18, 0, 21, -2, 24, -6,
    'e',
/* 0x72 'r'  offset 3139 */
    0, 16, 28, 0, 2, 4,
    0, 16, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 0, -28,
    'l', 0, 0,
    'm', 0, -16,
    'c', 2, -27, 7, -28, 16, -28,
    'e',
/* 0x73 's'  offset 3168 */
    0, 22, 28, 0, 2, 4,
    0, 22, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 22, -22,
    'c', 22, -27, 16, -28, 11, -28,
    'c', 4, -28, 0, -26, 0, -22,
    'c', 0, -11, 22, -20, 22, -7,
    'c', 22, 0, 17, 0, 11, 0,
    'c', 6, 0, 0, -1, 0, -6,
    'e',
/* 0x74 't'  offset 3219 */
    0, 16, 42, 0, 3, 4,
    0, 6, 16, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 6, -42,
    'l', 6, -8,
    'c', 6, -2, 8, 0, 16, 0,
    'm', 0, -28,
    'l', 14, -28,
    'e',
/* 0x75 'u'  offset 3252 */
    0, 22, 28, 0, 2, 3,
    0, 22, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -28,
    'l', 0, -8,
    'c', 0, 6, 18, 0, 22, -8,
    'm', 22, -28,
    'l', 22, 0,
    'e',
/* 0x76 'v'  offset 3283 */
    0, 24, 28, 0, 2, 3,
    0, 24, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -28,
    'l', 12, 0,
    'm', 24, -28,
    'l', 12, 0,
    'e',
/* 0x77 'w'  offset 3307 */
    0, 32, 28, 0, 2, 3,
    0, 32, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -28,
    'l', 8, 0,
    'm', 16, -28,
    'l', 8, 0,
    'm', 16, -28,
    'l', 24, 0,
    'm', 32, -28,
    'l', 24, 0,
    'e',
/* 0x78 'x'  offset 3343 */
    0, 22, 28, 0, 2, 3,
    0, 22, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -28,
    'l', 22, 0,
    'm', 22, -28,
    'l', 0, 0,
    'e',
/* 0x79 'y'  offset 3367 */
    -2, 24, 28, 14, 2, 4,
    0, 24, /* snap_x */
    -21, -15, 0, 14, /* snap_y */
    'm', 0, -28,
    'l', 12, 0,
    'm', 24, -28,
    'l', 12, 0,
    'c', 6, 13, 0, 14, -2, 14,
    'e',
/* 0x7a 'z'  offset 3399 */
    0, 22, 28, 0, 2, 4,
    0, 22, /* snap_x */
    -28, -21, -15, 0, /* snap_y */
    'm', 22, -28,
    'l', 0, 0,
    'm', 0, -28,
    'l', 22, -28,
    'm', 0, 0,
    'l', 22, 0,
    'e',
/* 0x7b '{'  offset 3430 */
    0, 16, 44, 0, 3, 5,
    0, 6, 16, /* snap_x */
    -44, -24, -21, -15, 0, /* snap_y */
    'm', 16, -44,
    'c', 10, -44, 6, -42, 6, -36,
    'l', 6, -24,
    'l', 0, -24,
    'l', 6, -24,
    'l', 6, -8,
    'c', 6, -2, 10, 0, 16, 0,
    'e',
/* 0x7c '|'  offset 3474 */
    0, 0, 50, 14, 1, 3,
    0, /* snap_x */
    -21, -15, 0, /* snap_y */
    'm', 0, -50,
    'l', 0, 14,
    'e',
/* 0x7d '}'  offset 3491 */
    0, 16, 44, 0, 3, 5,
    0, 10, 16, /* snap_x */
    -44, -24, -21, -15, 0, /* snap_y */
    'm', 0, -44,
    'c', 6, -44, 10, -42, 10, -36,
    'l', 10, -24,
    'l', 16, -24,
    'l', 10, -24,
    'l', 10, -8,
    'c', 10, -2, 6, 0, 0, 0,
    'e',
/* 0x7e '~'  offset 3535 */
    0, 36, 24, -12, 2, 5,
    0, 36, /* snap_x */
    -24, -21, -15, -12, 0, /* snap_y */
    'm', 0, -14,
    'c', 1, -21, 4, -24, 8, -24,
    'c', 18, -24, 18, -12, 28, -12,
    'c', 32, -12, 35, -15, 36, -22,
    'e',
};

const charmap_t[] charmap = {
    {
	    .page = 0x0000,
	    .offsets = (int[]) {
		    0,    0,    0,    0,    0,    0,    0,    0,
		    0,    0,    0,    0,    0,    0,    0,    0,
		    0,    0,    0,    0,    0,    0,    0,    0,
		    0,    0,    0,    0,    0,    0,    0,    0,
		    28,   40,   90,  114,  152,  224,  323,  390,
		    419,  441,  463,  494,  520,  556,  575,  604,
		    622,  666,  691,  736,  780,  809,  860,  919,
		    944, 1004, 1063, 1109, 1162, 1183, 1209, 1230,
		    1288, 1375, 1406, 1455, 1499, 1534, 1572, 1604,
		    1655, 1686, 1703, 1731, 1761, 1785, 1821, 1851,
		    1895, 1931, 1981, 2023, 2074, 2100, 2128, 2152,
		    2188, 2212, 2240, 2271, 2296, 2314, 2339, 2363,
		    2381, 2417, 2467, 2517, 2561, 2611, 2659, 2693,
		    2758, 2790, 2826, 2870, 2900, 2917, 2963, 2995,
		    3039, 3089, 3139, 3168, 3219, 3252, 3283, 3307,
		    3343, 3367, 3399, 3430, 3474, 3491, 3535,    0,
	    }
    },
};

/*
 * Fonts
 */

int ucs_page (int ucs4)
{
	return ucs4 >> UCS_PAGE_SHIFT;
}

int ucs_char_in_page (int ucs4)
{
	return ucs4 & (UCS_PER_PAGE - 1);
}

font_t font = {
	.name		= "Default",
	.style		= "Roman",
	.charmap	= charmap,
	.outlines	= outlines,
	.cur_page	= -1,
};

bool find_ucs4_page(*font_t font, int page)
{
	int i;

	if (font->cur_page == page)
		return true;

	for (i = 0; i < dim(font->charmap); i++)
		if (font->charmap[i].page == page)
		{
			font->cur_page = i;
			return true;
		}

	font->cur_page = -1;
	return false;
}

int glyph_offset (*font_t font, int ucs4)
{
	int		idx = ucs_char_in_page(ucs4);

	if (!find_ucs4_page(font, ucs_page(ucs4)))
		idx = 0;

	return font->charmap[font->cur_page].offsets[idx];
}


int glyph_left(*font_t font, int offset) = font->outlines[offset + 0];
int glyph_right(*font_t font, int offset) = font->outlines[offset + 1];
int glyph_ascent(*font_t font, int offset) = font->outlines[offset + 2];
int glyph_descent(*font_t font, int offset) = font->outlines[offset + 3];
int glyph_n_snap_x(*font_t font, int offset) = font->outlines[offset + 4];
int glyph_n_snap_y(*font_t font, int offset) = font->outlines[offset + 5];
int glyph_snap_x(*font_t font, int offset, int s) = font->outlines[offset + 6 + s];
int glyph_snap_y(*font_t font, int offset, int s) = font->outlines[offset + 6 + glyph_n_snap_x(font, offset) + s];
int glyph_draw(*font_t font, int offset) {
	return offset + 6 + glyph_n_snap_x(font, offset) + glyph_n_snap_y(font, offset);
}

const real glyph_margin = 12;
const real pen_size = 4;
const real font_ascent = 48;
const real font_descent = 16;

real glyph_width(*font_t font, int offset) = glyph_right(font, offset) + glyph_margin;

void
path_move(real x, real y)
{
	printf("move (%f, %f)\n", x, y);
}

void
path_draw(real x, real y)
{
	printf("draw (%f, %f)\n", x, y);
}

void
path_curve(real x1, real y1, real x2, real y2, real x3, y3)
{
	printf("curve (%f, %f), (%f, %f), (%f, %f)\n", x1, y1, x2, y2, x3, y3);
}

typedef struct {
	void(real x, real y) move;
	void(real x, real y) draw;
	void(real x1, real y1, real x2, real y2, real x3, real y3) curve;
} draw_calls_t;

draw_calls_t debug_calls = {
	.move = path_move,
	.draw = path_draw,
	.curve = path_curve,
};

real
glyph_path(*font_t font, int ucs4, *draw_calls_t calls)
{
	real	x1, y1, x2, y2, x3, y3, _x1, _y1;
	int	op;
	int	glyph_start = glyph_offset(font, ucs4);
	int	offset = glyph_draw(font, glyph_start);

	x1 = y1 = 0;

	for (;;) {
		op = font->outlines[offset++];

		switch (op) {
		case 'm':
			x1 = font->outlines[offset++];
			y1 = font->outlines[offset++];
			calls->move (x1, y1);
			continue;
		case 'l':
			x1 = font->outlines[offset++];
			y1 = font->outlines[offset++];
			calls->draw (x1, y1);
			continue;
		case 'c':
			x3 = font->outlines[offset++];
			y3 = font->outlines[offset++];
			x2 = font->outlines[offset++];
			y2 = font->outlines[offset++];
			x1 = font->outlines[offset++];
			y1 = font->outlines[offset++];
			calls->curve (x3, y3, x2, y2, x1, y1);
			continue;
		case '2':
			_x1 = font->outlines[offset++];
			_y1 = font->outlines[offset++];
			x3 = x1 + 2 * (_x1 - x1) / 3;
			y3 = y1 + 2 * (_y1 - y1) / 3;
			x1 = font->outlines[offset++];
			y1 = font->outlines[offset++];
			x2 = x1 + 2 * (_x1 - x1) / 3;
			y2 = y1 + 2 * (_y1 - y1) / 3;
			calls->curve (x3, y3, x2, y2, x1, y1);
			continue;
		case 'e':
			break;
		default:
			printf("unknown font op 0x%02x '%c'\n", op, op);
			break;
		}
		break;
	}
	return glyph_width(font, glyph_start);
}

real
text_path(*font_t font, string s, *draw_calls_t calls)
{
	int l = String::length(s);
	real ret = 0.0;

	void move(real x1, real y1)
	{
		calls->move(x1 + ret, y1);
	}

	void draw(real x1, real y1)
	{
		calls->draw(x1 + ret, y1);
	}

	void curve(real x1, real y1, real x2, real y2, real x3, real y3)
	{
		calls->curve(x1 + ret, y1, x2 + ret, y2, x3 + ret, y3);
	}

	draw_calls_t text_calls = {
		.move = move,
		.draw = draw,
		.curve = curve
	};

	for (int i = 0; i < l; i++) {
		ret += glyph_path(font, s[i], &text_calls);
	}
	return ret;
}

typedef struct {
	real    left_side_bearing;
	real    right_side_bearing;
	real    ascent;
	real    descent;
	real    width;
	real    font_ascent;
	real    font_descent;
} text_metrics_t;

text_metrics_t
glyph_metrics(*font_t font, int ucs4)
{
	int	glyph_start = glyph_offset(font, ucs4);

	return (text_metrics_t) {
		.left_side_bearing = glyph_left(font, glyph_start),
		.right_side_bearing = glyph_right(font, glyph_start),
		.ascent = glyph_ascent(font, glyph_start),
		.descent = glyph_descent(font, glyph_start),
		.width = glyph_width(font, glyph_start),
		.font_ascent = font_ascent,
		.font_descent = font_descent,
	};
}

text_metrics_t
text_metrics(*font_t font, string s)
{
	int l = String::length(s);
	real x = 0.0;
	text_metrics_t ret;

	for (int i = 0; i < l; i++) {
		text_metrics_t g = glyph_metrics(font, s[i]);
		g.left_side_bearing += x;
		g.right_side_bearing += x;
		g.width += x;
		if (i == 0)
			ret = g;
		else {
			ret.left_side_bearing = min(ret.left_side_bearing, g.left_side_bearing);
			ret.right_side_bearing = max(ret.right_side_bearing, g.right_side_bearing);
			ret.ascent = max(ret.ascent, g.ascent);
			ret.descent = max(ret.descent, g.descent);
			ret.width = g.width;
		}
		x = g.width;
	}
	return ret;
}

typedef struct {
	real	x, y;
} spoint_t;

typedef struct {
	spoint_t    a, b, c, d;
} spline_t;

void
_lerp_half (*spoint_t a, *spoint_t b, *spoint_t result)
{
	result->x = a->x + ((b->x - a->x) / 2);
	result->y = a->y + ((b->y - a->y) / 2);
}

void
_de_casteljau (*spline_t spline, *spline_t s1, *spline_t s2)
{
	spoint_t ab, bc, cd;
	spoint_t abbc, bccd;
	spoint_t final;

	_lerp_half (&spline->a, &spline->b, &ab);
	_lerp_half (&spline->b, &spline->c, &bc);
	_lerp_half (&spline->c, &spline->d, &cd);
	_lerp_half (&ab, &bc, &abbc);
	_lerp_half (&bc, &cd, &bccd);
	_lerp_half (&abbc, &bccd, &final);

	s1->a = spline->a;
	s1->b = ab;
	s1->c = abbc;
	s1->d = final;

	s2->a = final;
	s2->b = bccd;
	s2->c = cd;
	s2->d = spline->d;
}

real
_distance_to_point_squared (*spoint_t a, *spoint_t b)
{
	real dx = (b->x - a->x);
	real dy = (b->y - a->y);

	return dx*dx + dy*dy;
}

real
_distance_to_line_squared (*spoint_t p, *spoint_t p1, *spoint_t p2)
{
	/*
	 * Convert to normal form (AX + BY + C = 0)
	 *
	 * (X - x1) * (y2 - y1) = (Y - y1) * (x2 - x1)
	 *
	 * X * (y2 - y1) - Y * (x2 - x1) - x1 * (y2 - y1) + y1 * (x2 - x1) = 0
	 *
	 * A = (y2 - y1)
	 * B = (x1 - x2)
	 * C = (y1x2 - x1y2)
	 *
	 * distanceÂ² = (AX + BC + C)Â² / (AÂ² + BÂ²)
	 */
	real   A = p2->y - p1->y;
	real   B = p1->x - p2->x;
	real   C = p1->y * p2->x - p1->x * p2->y;
	real   den, num;

	num = A * p->x + B * p->y + C;
	if (num < 0)
		num = -num;
	den = A * A + B * B;
	if (den == 0)
		return _distance_to_point_squared (p, p1);
	else
		return (num * num) / den;
}

/*
 * Return an upper bound on the error (squared) that could
 * result from approximating a spline as a line segment 
 * connecting the two endpoints 
 */

real
_spline_error_squared (*spline_t spline)
{
	real berr, cerr;

	berr = _distance_to_line_squared (&spline->b, &spline->a, &spline->d);
	cerr = _distance_to_line_squared (&spline->c, &spline->a, &spline->d);

	if (berr > cerr)
		return berr;
	else
		return cerr;
}

/*
 * Pure recursive spline decomposition.
 */

void
_spline_decompose (void(real x, real y) draw,
		   *spline_t	spline,
		   real		tolerance_squared)
{
    if (_spline_error_squared (spline) <= tolerance_squared)
    {
	draw (spline->a.x, spline->a.y);
    }
    else
    {
	spline_t s1, s2;
	_de_casteljau (spline, &s1, &s2);
	_spline_decompose (draw, &s1, tolerance_squared);
	_spline_decompose (draw, &s2, tolerance_squared);
    }
}

typedef struct {
	real	xx, yx;
	real	xy, yy;
	real	x0, y0;
} matrix_t;

matrix_t
matrix_identity() {
	return (matrix_t) {
		.xx = 1, .xy = 0,
		.yx = 0, .yy = 1,
		.x0 = 0, .y0 = 0
	};
}

matrix_t
matrix_multiply(&matrix_t a, &matrix_t b)
{
	return (matrix_t) {
		.xx = a.xx * b.xx + a.yx * b.xy,
		.yx = a.xx * b.yx + a.yx * b.yy,
		.xy = a.xy * b.xx + a.yy * b.xy,
		.yy = a.xy * b.yx + a.yy * b.yy,
		.x0 = a.x0 * b.xx + a.y0 * b.xy + b.x0,
		.y0 = a.x0 * b.yx + a.y0 * b.yy + b.y0 };
}

matrix_t
matrix_translate (&matrix_t m, real tx, real ty)
{
	return matrix_multiply (&(matrix_t) {
			.xx = 1,  .yx = 0,
			.xy = 0,  .yy = 1,
			.x0 = tx, .y0 = ty },
		&m);
}

matrix_t
matrix_scale (&matrix_t m, real sx, real sy)
{
	return matrix_multiply (&(matrix_t) {
			.xx = sx, .yx =  0,
			.xy =  0, .yy = sy,
			.x0 =  0, .y0 =  0 },
		&m);
}

matrix_t
matrix_rotate (&matrix_t m, real a)
{
	real c = cos(a);
	real s = sin(a);
	return matrix_multiply (&(matrix_t) {
			.xx = c, .yx = s,
			.xy = -s,.yy = c,
			.x0 = 0, .y0 = 0 },
		&m);
}

spoint_t
matrix_point (&matrix_t m, spoint_t p)
{
	return (spoint_t) {
		.x = m.xx * p.x + m.yx * p.y + m.x0,
		.y = m.xy * p.x + m.yy * p.y + m.y0
	};
};

spoint_t
matrix_distance (&matrix_t m, spoint_t p)
{
	return (spoint_t) { 
		.x = m.xx * p.x + m.yx * p.y,
		.y = m.xy * p.x + m.yy * p.y
	};
};

spoint_t
spoint (real x, real y)
{
	return (spoint_t) {
		.x = x,
		.y = y
	};
}

real feed_rate = 100;
real tolerance = 0.001;

void
text_to_gcode(string s)
{
	text_metrics_t metrics = text_metrics(&font, s);
	real width = metrics.width + pen_size;
	real height = metrics.font_ascent + metrics.font_descent + pen_size;
	file f = File::open("test.gcode", "w");
	real last_x = 0.0, last_y = 0.0;
	matrix_t m = matrix_identity();
	m = matrix_scale(&m, 1/64, -1/64);
#	m = matrix_translate(&m, 0, height);

	void smove(real x1, real y1)
	{
		File::fprintf(f, "G00 X%f Y%f\n", x1, y1);
	}

	void move(real x1, real y1)
	{
		spoint_t p = matrix_point(&m, spoint(x1, y1));
		smove(p.x, p.y);
		last_x = x1;
		last_y = y1;
	}

	void sdraw(real x1, real y1)
	{
		File::fprintf(f, "G01 X%f Y%f F%f\n", x1, y1, feed_rate);
	}

	void draw(real x1, real y1)
	{
		spoint_t p = matrix_point(&m, spoint(x1, y1));
		sdraw(p.x, p.y);
		last_x = x1;
		last_y = y1;
	}

	void curve(real x1, real y1, real x2, real y2, real x3, real y3)
	{
		spoint_t a = matrix_point(&m, spoint(last_x, last_y));
		spoint_t b = matrix_point(&m, spoint(x1, y1));
		spoint_t c = matrix_point(&m, spoint(x2, y2));
		spoint_t d = matrix_point(&m, spoint(x3, y3));
		spline_t	spline = {
			.a = a,
			.b = b,
			.c = c,
			.d = d,
		};
		_spline_decompose(sdraw, &spline, tolerance**2);
		draw(x3, y3);
	}

	draw_calls_t gcode_calls = {
		.move = move,
		.draw = draw,
		.curve = curve
	};

	File::fprintf(f, "G20\n");
	File::fprintf(f, "G90\n");
	File::fprintf(f, "G17\n");

	text_path(&font, s, &gcode_calls);

	File::fprintf(f, "M30\n");

	File::close(f);
}

#autoload Cairo;
#
#void
#text_to_svg(string s)
#{
#	text_metrics_t metrics = text_metrics(&font, s);
#	real width = metrics.width + pen_size;
#	real height = metrics.font_ascent + metrics.font_descent + pen_size;
#	Cairo::cairo_t	cr = Cairo::new_svg("test.svg", width, height);
#
#	Cairo::set_source_rgba(cr, 1, 1, 1, 1);
#	Cairo::paint(cr);
#	Cairo::set_source_rgba(cr, 0, 0, 0, 1);
#	Cairo::set_line_width(cr, pen_size);
#	Cairo::set_line_cap(cr, Cairo::line_cap_t.ROUND);
#	Cairo::translate(cr, pen_size/2, metrics.font_ascent + pen_size /2);
#
#	void move(real x1, real y1)
#	{
#		Cairo::move_to(cr, x1, y1);
#	}
#
#	void draw(real x1, real y1)
#	{
#		Cairo::line_to(cr, x1, y1);
#	}
#
#	void curve(real x1, real y1, real x2, real y2, real x3, real y3)
#	{
#		Cairo::curve_to(cr, x1, y1, x2, y2, x3, y3);
#	}
#
#	draw_calls_t svg_calls = {
#		.move = move,
#		.draw = draw,
#		.curve = curve
#	};
#
#	text_path(&font, s, &svg_calls);
#
#	Cairo::stroke(cr);
#
#	Cairo::Surface::finish(Cairo::get_target(cr));
#	Cairo::destroy(cr);
#}
#
